// üìö EXPLICA√á√ÉO DID√ÅTICA: USERS CONTROLLER
// =========================================
//
// üéØ O QUE √â UM CONTROLLER NO NESTJS?
// Um controller √© como um "balc√£o de atendimento" de uma empresa:
// - Recebe pedidos dos clientes (requisi√ß√µes HTTP)
// - Processa esses pedidos usando servi√ßos especializados
// - Retorna respostas padronizadas para os clientes
// - Define quais "servi√ßos" est√£o dispon√≠veis (endpoints/rotas)
//
// üè™ ANALOGIA: Balc√£o de Atendimento de um Banco
// - Cliente pede para ver extrato ‚Üí GET /users (listar usu√°rios)
// - Cliente quer atualizar dados ‚Üí PATCH /users/profile (atualizar perfil)
// - Cliente quer cancelar conta ‚Üí DELETE /users/profile (excluir conta)
// - Funcion√°rio verifica se cliente est√° autorizado antes de cada opera√ß√£o

// üì¶ IMPORTA√á√ïES: Ferramentas que vamos usar
import { 
  Controller,        // üè∑Ô∏è Marca classe como controller
  Get,              // üîç Requisi√ß√µes GET (buscar dados)
  Patch,            // ‚úèÔ∏è Requisi√ß√µes PATCH (atualizar dados)
  Delete,           // üóëÔ∏è Requisi√ß√µes DELETE (remover dados)
  Body,             // üìã Dados enviados no corpo da requisi√ß√£o
  UseGuards,        // üõ°Ô∏è Prote√ß√£o das rotas
  Request,          // üì® Informa√ß√µes da requisi√ß√£o (usu√°rio logado)
  Param,            // üî¢ Par√¢metros da URL (/users/:id)
  ParseUUIDPipe,    // ‚úÖ Validador de UUID
  NotFoundException, // ‚ùå Erro "n√£o encontrado"
  HttpCode,         // üìä C√≥digo de resposta HTTP
  HttpStatus        // üìã Lista de c√≥digos HTTP padr√£o
} from '@nestjs/common';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { UserRepository } from './csv-user.repository';
import { UpdateUserDto } from './dto/update-user.dto';
import { ApiBearerAuth, ApiResponse, ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';
import { OnlineUsersService } from '../auth/online-users.service';
import { BanRepository } from '../bans/ban.repository';
import * as bcrypt from 'bcrypt';

// üìñ DOCUMENTA√á√ÉO SWAGGER: Metadados para gerar documenta√ß√£o autom√°tica
@ApiTags('Usu√°rios')           // üè∑Ô∏è Agrupa endpoints na documenta√ß√£o
@ApiBearerAuth()               // üîê Indica que precisa de token no cabe√ßalho
@Controller('users')           // üõ£Ô∏è Define que todas as rotas come√ßam com '/users'
export class UsersController {
  
  // üèóÔ∏è CONSTRUTOR: Injeta depend√™ncias (servi√ßos que o controller vai usar)
  // √â como contratar funcion√°rios especializados para o balc√£o
  constructor(
    private readonly userRepo: UserRepository,      // üìö Especialista em dados de usu√°rios
    private readonly onlineUsers: OnlineUsersService, // üìä Monitor de usu√°rios online
    private readonly banRepository: BanRepository,    // üö´ Verificador de banimentos
  ) {}

  // üîç ENDPOINT: Listar todos os usu√°rios
  // URL: GET /users
  // √â como pedir uma lista de todos os clientes do banco
  @UseGuards(JwtAuthGuard)      // üõ°Ô∏è S√≥ usu√°rios autenticados podem acessar
  @ApiOperation({ summary: 'Listar todos os usu√°rios' })
  @ApiResponse({
    status: 200,
    description: 'Lista de usu√°rios com status online e de banimento',
    example: [
      {
        id: '32ae172a-4b7b-44a5-a0c9-082f760af1cf',
        name: 'Rafael Lechensque',
        isCurrentUser: true,
        isOnline: true,
        status: 'active',
      },
    ],
  })
  @Get()  // üîç M√©todo HTTP GET
  async findAll(@Request() req) {
    // 1Ô∏è‚É£ Busca todos os usu√°rios no "arquivo de clientes" (CSV)
    const allUsers = await this.userRepo.findAll();

    // 2Ô∏è‚É£ Para cada usu√°rio, adiciona informa√ß√µes extras (status online, banimento)
    // √â como adicionar etiquetas coloridas na lista: verde=online, vermelha=banido
    const usersWithStatus = await Promise.all(
      allUsers.map(async (user) => {
        // üö´ Verifica se o usu√°rio est√° banido
        const isBanned = await this.banRepository.isUserBanned(user.id);
        
        return {
          id: user.id,
          name: user.name,
          // üë§ Marca se √© o pr√≥prio usu√°rio que est√° fazendo a consulta
          isCurrentUser: user.id === req.user.id,
          // üü¢ Verifica se est√° online neste momento
          isOnline: this.onlineUsers.isOnline(user.id),
          // üö¶ Status: 'banned' se banido, 'active' se normal
          status: isBanned ? 'banned' : 'active',
        };
      })
    );

    // 3Ô∏è‚É£ Retorna a lista enriquecida com todas as informa√ß√µes
    return usersWithStatus;
  }

  // üîç ENDPOINT: Buscar usu√°rio espec√≠fico por ID
  // URL: GET /users/:id (exemplo: GET /users/123e4567-e89b-12d3-a456-426614174000)
  // √â como pedir informa√ß√µes de um cliente espec√≠fico
  @UseGuards(JwtAuthGuard)      // üõ°Ô∏è Prote√ß√£o: s√≥ usu√°rios logados
  @ApiOperation({ summary: 'Obter usu√°rio por ID' })
  @ApiParam({ name: 'id', description: 'ID do usu√°rio (UUID)', example: '32ae172a-4b7b-44a5-a0c9-082f760af1cf' })
  @ApiResponse({
    status: 200,
    description: 'Dados do usu√°rio',
    example: {
      id: '32ae172a-4b7b-44a5-a0c9-082f760af1cf',
      name: 'Rafael Lechensque',
      isCurrentUser: false,
      isOnline: true,
    },
  })
  @Get(':id')  // üîç :id √© um par√¢metro vari√°vel na URL
  async findOne(@Request() req, @Param('id', ParseUUIDPipe) id: string) {
    // 1Ô∏è‚É£ Busca o usu√°rio pelo ID (ParseUUIDPipe valida se √© um UUID v√°lido)
    const user = await this.userRepo.findById(id);
    
    // 2Ô∏è‚É£ Se n√£o encontrou, retorna erro 404
    if (!user) {
      throw new NotFoundException('Usu√°rio n√£o encontrado');
    }

    // 3Ô∏è‚É£ Retorna dados do usu√°rio com informa√ß√µes extras
    return {
      id: user.id,
      name: user.name,
      isCurrentUser: user.id === req.user.id,  // √â o pr√≥prio usu√°rio?
      isOnline: this.onlineUsers.isOnline(user.id),  // Est√° online?
    };
  }

  // ‚úèÔ∏è ENDPOINT: Atualizar perfil do usu√°rio autenticado
  // URL: PATCH /users/profile
  // √â como um cliente atualizando seus pr√≥prios dados no banco
  @UseGuards(JwtAuthGuard)      // üõ°Ô∏è S√≥ o pr√≥prio usu√°rio pode alterar seus dados
  @Patch('profile')             // ‚úèÔ∏è PATCH = atualiza√ß√£o parcial
  @HttpCode(HttpStatus.OK)      // üìä Retorna c√≥digo 200 (OK) em vez do padr√£o 201
  @ApiOperation({ summary: 'Atualizar perfil do usu√°rio autenticado' })
  @ApiResponse({
    status: 200,
    description: 'Perfil atualizado com sucesso',
    example: {
      id: '32ae172a-4b7b-44a5-a0c9-082f760af1cf',
      name: 'Jo√£o Silva Atualizado',
      message: 'Perfil atualizado com sucesso',
    },
  })
  async updateProfile(@Request() req, @Body() updateUserDto: UpdateUserDto) {
    // 1Ô∏è‚É£ Pega o ID do usu√°rio logado (do token JWT)
    const userId = req.user.id;
    
    // 2Ô∏è‚É£ Se est√° mudando a senha, precisa criptografar antes de salvar
    // √â como trocar uma senha: nunca guardamos a senha real, s√≥ o "hash"
    if (updateUserDto.password) {
      const saltRounds = 10;  // N√≠vel de seguran√ßa da criptografia
      updateUserDto.password = await bcrypt.hash(updateUserDto.password, saltRounds);
    }
    
    // 3Ô∏è‚É£ Atualiza os dados no "arquivo de clientes"
    const updatedUser = await this.userRepo.update(userId, updateUserDto);
    
    // 4Ô∏è‚É£ Se n√£o conseguiu atualizar, usu√°rio n√£o existe
    if (!updatedUser) {
      throw new NotFoundException('Usu√°rio n√£o encontrado');
    }

    // 5Ô∏è‚É£ Retorna confirma√ß√£o da atualiza√ß√£o (sem mostrar dados sens√≠veis)
    return {
      id: updatedUser.id,
      name: updatedUser.name,
      message: 'Perfil atualizado com sucesso',
    };
  }

  // üóëÔ∏è ENDPOINT: Excluir perfil do usu√°rio autenticado
  // URL: DELETE /users/profile
  // √â como um cliente cancelando sua conta no banco
  @UseGuards(JwtAuthGuard)      // üõ°Ô∏è S√≥ o pr√≥prio usu√°rio pode excluir sua conta
  @Delete('profile')            // üóëÔ∏è DELETE = remo√ß√£o
  @HttpCode(HttpStatus.OK)      // üìä Retorna 200 em vez do padr√£o 204
  @ApiOperation({ summary: 'Excluir perfil do usu√°rio autenticado' })
  @ApiResponse({
    status: 200,
    description: 'Perfil exclu√≠do com sucesso',
    example: {
      message: 'Usu√°rio exclu√≠do com sucesso',
    },
  })
  async deleteProfile(@Request() req) {
    // 1Ô∏è‚É£ Pega o ID do usu√°rio logado
    const userId = req.user.id;
    
    // 2Ô∏è‚É£ Tenta excluir o usu√°rio do "arquivo de clientes"
    const deleted = await this.userRepo.delete(userId);
    
    // 3Ô∏è‚É£ Se n√£o conseguiu excluir, usu√°rio n√£o existe
    if (!deleted) {
      throw new NotFoundException('Usu√°rio n√£o encontrado');
    }

    // 4Ô∏è‚É£ Retorna confirma√ß√£o da exclus√£o
    return {
      message: 'Usu√°rio exclu√≠do com sucesso',
    };
  }
}

// üìù RESUMO EDUCATIVO: O QUE APRENDEMOS
// =====================================
//
// üéØ PADR√ÉO MVC (Model-View-Controller):
// - Controller: Esta classe (recebe requests, retorna responses)
// - Model: UserRepository (gerencia dados)
// - View: Frontend React (n√£o est√° neste arquivo)
//
// üõ°Ô∏è SEGURAN√áA:
// - Todas as rotas protegidas com JwtAuthGuard
// - Senhas criptografadas com bcrypt
// - Valida√ß√£o de UUIDs
// - Verifica√ß√£o de usu√°rio existente
//
// üìä HTTP METHODS:
// - GET: Buscar dados (n√£o modifica nada)
// - PATCH: Atualizar dados parcialmente
// - DELETE: Remover dados
//
// üîß BOAS PR√ÅTICAS:
// - Documenta√ß√£o autom√°tica com Swagger
// - C√≥digos de erro apropriados (404 para n√£o encontrado)
// - Respostas padronizadas
// - Separa√ß√£o de responsabilidades (controller n√£o acessa banco diretamente)
//
// üí° CONCEITOS IMPORTANTES:
// - Dependency Injection (constructor recebe depend√™ncias)
// - Async/Await (opera√ß√µes ass√≠ncronas)
// - Decorators (@Get, @Post, etc.)
// - Pipes (ParseUUIDPipe para valida√ß√£o)
// - DTOs (Data Transfer Objects) para estruturar dados
