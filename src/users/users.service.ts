/*
 * ====================================================================
 * ARQUIVO: users.service.ts
 * LOCALIZA√á√ÉO: src/users/users.service.ts
 * ====================================================================
 * 
 * PROP√ìSITO DESTE ARQUIVO:
 * Este arquivo √© o "DEPARTAMENTO DE USU√ÅRIOS" do WhatsUT. Ele gerencia
 * todas as opera√ß√µes relacionadas aos usu√°rios: criar, buscar, verificar
 * se j√° existe, criptografar senhas, etc.
 * 
 * ANALOGIA SIMPLES:
 * Imagine um banco. Este arquivo seria o departamento que:
 * - Abre novas contas (criar usu√°rio)
 * - Consulta dados de clientes (buscar usu√°rio)
 * - Verifica se CPF j√° est√° cadastrado (evitar duplicatas)
 * - Guarda documentos no cofre (criptografar senhas)
 * 
 * RESPONSABILIDADES:
 * 1. CRIAR novos usu√°rios com senhas criptografadas
 * 2. BUSCAR usu√°rios por nome ou ID
 * 3. VALIDAR se usu√°rio j√° existe antes de criar
 * 4. GERENCIAR criptografia de senhas (bcrypt)
 * 5. COMUNICAR com o reposit√≥rio (que acessa o CSV)
 * 
 * RELA√á√ÉO COM OUTROS ARQUIVOS:
 * - √â USADO por: AuthService (para login e registro)
 * - USA: UserRepository (para acessar dados no CSV)
 * - RETORNA: dados dos usu√°rios para quem solicitar
 */

// ===== IMPORTA√á√ïES =====

// ConflictException: tipo de erro para quando algo j√° existe (usu√°rio duplicado)
// Injectable: marca como servi√ßo que pode ser injetado
import { ConflictException, Injectable } from '@nestjs/common';

// DTO que define como os dados de um novo usu√°rio devem chegar
import { CreateUserDto } from './dto/create-user.dto';

// Reposit√≥rio que acessa o arquivo CSV de usu√°rios
import { UserRepository } from './csv-user.repository';

// Biblioteca para criptografar senhas de forma segura
import * as bcrypt from 'bcrypt';

// ===== CLASSE UsersService =====

@Injectable()
export class UsersService {
  
  // ===== CONSTRUTOR =====
  constructor(private usersRepo: UserRepository) {
    /*
     * INJE√á√ÉO DE DEPEND√äNCIA:
     * 
     * Recebemos o UserRepository (reposit√≥rio de usu√°rios) que sabe
     * como acessar e manipular o arquivo CSV onde os usu√°rios s√£o salvos.
     * 
     * √â como ter acesso ao "arquivo de clientes" do banco.
     * Este servi√ßo faz as opera√ß√µes de neg√≥cio, e o reposit√≥rio
     * faz as opera√ß√µes t√©cnicas de salvar/buscar dados.
     */
  }

  // ===== M√âTODO: BUSCAR USU√ÅRIO POR NOME =====
  async findOne(username: string) {
    /*
     * PROP√ìSITO: Encontrar um usu√°rio espec√≠fico pelo nome
     * 
     * QUANDO √â USADO:
     * - No login (para verificar se o usu√°rio existe)
     * - Na cria√ß√£o (para verificar se nome j√° est√° em uso)
     * 
     * EXEMPLO DE USO:
     * const usuario = await usersService.findOne("Jo√£o");
     * if (usuario) {
     *   console.log("Usu√°rio encontrado:", usuario.name);
     * }
     */
    
    // Delega a busca para o reposit√≥rio, que sabe como acessar o CSV
    return this.usersRepo.findByName(username);
    
    /*
     * RETORNO:
     * - Se encontrar: objeto com { id, name, password }
     * - Se n√£o encontrar: null ou undefined
     */
  }

  // ===== M√âTODO: BUSCAR USU√ÅRIO POR ID =====
  async findById(userId: string) {
    /*
     * PROP√ìSITO: Encontrar um usu√°rio espec√≠fico pelo ID √∫nico
     * 
     * QUANDO √â USADO:
     * - Quando temos o ID do usu√°rio (ex: do token JWT)
     * - Para buscar dados completos do usu√°rio
     * 
     * DIFEREN√áA ENTRE findOne e findById:
     * - findOne: busca por nome (para login)
     * - findById: busca por ID (para opera√ß√µes internas)
     */
    
    return this.usersRepo.findById(userId);
  }

  // ===== M√âTODO: CRIAR NOVO USU√ÅRIO =====
  async create({ name, password }: CreateUserDto) {
    /*
     * PROP√ìSITO: Criar uma nova conta de usu√°rio
     * 
     * PAR√ÇMETROS:
     * - name: nome do usu√°rio (deve ser √∫nico)
     * - password: senha em texto puro (ser√° criptografada)
     * 
     * PROCESSO COMPLETO:
     * 1. Verifica se usu√°rio j√° existe
     * 2. Criptografa a senha
     * 3. Salva no arquivo CSV
     * 4. Retorna dados b√°sicos (sem a senha)
     */
    
    // ===== PASSO 1: VERIFICAR SE USU√ÅRIO J√Å EXISTE =====
    const exitUser = await this.usersRepo.findByName(name);
    if (exitUser) {
      // Se j√° existe, lan√ßa erro espec√≠fico
      throw new ConflictException('Usario ja cadastrado');
      /*
       * ConflictException gera erro HTTP 409 (Conflict)
       * √â o c√≥digo correto para "recurso j√° existe"
       * 
       * O frontend recebe este erro e pode mostrar mensagem:
       * "Este nome de usu√°rio j√° est√° em uso"
       */
    }
    
    // ===== PASSO 2: CRIPTOGRAFAR A SENHA =====
    
    // 2.1: Gerar "sal" (salt) - um valor aleat√≥rio √∫nico
    const salt = await bcrypt.genSalt();
    /*
     * O QUE √â SALT?
     * 
     * Salt √© um valor aleat√≥rio adicionado √† senha antes de criptografar.
     * Isso impede ataques de "rainbow table" (tabelas pr√©-computadas).
     * 
     * EXEMPLO:
     * Senha: "123456"
     * Salt: "$2b$10$abcdef..."
     * Hash final: resultado de criptografar("123456" + salt)
     * 
     * Mesmo que duas pessoas tenham a mesma senha, os hashes ser√£o diferentes
     * por causa do salt √∫nico de cada uma.
     */
    
    // 2.2: Criptografar senha + salt
    const hashed = await bcrypt.hash(password, salt);
    /*
     * bcrypt.hash() faz a "m√°gica":
     * - Combina senha + salt
     * - Aplica algoritmo de criptografia
     * - Retorna um hash que √© imposs√≠vel de reverter
     * 
     * EXEMPLO:
     * Entrada: "123456"
     * Sa√≠da: "$2b$10$abcdef...xyz" (60 caracteres)
     * 
     * PROPRIEDADES IMPORTANTES:
     * - √â "one-way": voc√™ pode gerar o hash, mas n√£o pode voltar √† senha
     * - √â "determin√≠stico": mesma senha + mesmo salt = mesmo hash
     * - √â "resistente": muito dif√≠cil de quebrar por for√ßa bruta
     */
    
    // ===== PASSO 3: SALVAR NO ARQUIVO CSV =====
    const user = await this.usersRepo.create({
      name,           // Nome do usu√°rio
      password: hashed, // Senha criptografada (nunca a senha original!)
    });
    /*
     * O reposit√≥rio vai:
     * - Gerar um ID √∫nico para o usu√°rio
     * - Adicionar uma linha no arquivo users.csv
     * - Retornar os dados do usu√°rio criado
     */
    
    // ===== PASSO 4: RETORNAR DADOS SEGUROS =====
    return { 
      id: user.id, 
      name: user.name 
    };
    /*
     * IMPORTANTE: N√ÉO retornamos a senha!
     * 
     * Mesmo que seja criptografada, √© boa pr√°tica nunca enviar
     * senhas de volta para o frontend. Retornamos apenas dados
     * que s√£o seguros de expor.
     * 
     * O frontend vai receber: { id: "123", name: "Jo√£o" }
     */
  }
}

/*
 * ====================================================================
 * RESUMO DO PAPEL DESTE ARQUIVO NO SISTEMA:
 * ====================================================================
 * 
 * O UsersService √© o "GERENTE DE USU√ÅRIOS" do WhatsUT. Ele:
 * 
 * 1. üë§ CRIA CONTAS: Registra novos usu√°rios com seguran√ßa
 * 2. üîç BUSCA USU√ÅRIOS: Por nome (login) ou ID (opera√ß√µes internas)
 * 3. üõ°Ô∏è PROTEGE SENHAS: Criptografa todas as senhas com bcrypt
 * 4. ‚úÖ EVITA DUPLICATAS: Verifica se usu√°rio j√° existe antes de criar
 * 5. üîí MANT√âM SEGURAN√áA: Nunca exp√µe senhas em retornos
 * 
 * FLUXO DE CRIA√á√ÉO DE USU√ÅRIO:
 * 
 * Frontend ‚Üí AuthController ‚Üí AuthService ‚Üí UsersService ‚Üí UserRepository ‚Üí CSV
 *                                              ‚Üë
 *                                   Este arquivo faz:
 *                                   - Valida√ß√£o de duplicata
 *                                   - Criptografia da senha
 *                                   - Retorno seguro dos dados
 * 
 * CONCEITOS DE SEGURAN√áA APLICADOS:
 * - Hash de senhas (bcrypt)
 * - Salt √∫nico por usu√°rio
 * - Valida√ß√£o de dados
 * - N√£o exposi√ß√£o de senhas
 * - Tratamento de erros espec√≠ficos
 * 
 * SEM ESTE ARQUIVO: 
 * N√£o haveria como criar ou buscar usu√°rios de forma segura!
 * As senhas ficariam em texto puro (muito perigoso).
 */
