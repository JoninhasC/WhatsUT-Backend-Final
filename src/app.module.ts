/*
 * ====================================================================
 * ARQUIVO: app.module.ts
 * LOCALIZA√á√ÉO: src/app.module.ts
 * ====================================================================
 * 
 * PROP√ìSITO DESTE ARQUIVO:
 * Este √© o "M√ìDULO RAIZ" do WhatsUT. √â como a "planta baixa" de um pr√©dio
 * que mostra como todos os departamentos (m√≥dulos) est√£o organizados e
 * conectados entre si. √â o primeiro m√≥dulo que o NestJS carrega.
 * 
 * ANALOGIA SIMPLES:
 * Imagine uma empresa com v√°rios departamentos:
 * - Departamento de RH (UsersModule)
 * - Departamento de Seguran√ßa (AuthModule)  
 * - Departamento de Comunica√ß√£o (ChatModule)
 * - Departamento de Grupos (GroupModule)
 * - Departamento de Modera√ß√£o (BansModule)
 * 
 * Este arquivo seria como o "organograma da empresa" que mostra:
 * - Quais departamentos existem
 * - Como eles se relacionam
 * - Quem s√£o os respons√°veis gerais (controllers/services)
 * 
 * CONCEITO IMPORTANTE - M√ìDULOS NO NESTJS:
 * Um m√≥dulo √© um agrupamento l√≥gico de funcionalidades relacionadas.
 * √â uma forma de organizar o c√≥digo de maneira limpa e modular.
 * Cada m√≥dulo pode ter: controllers, services, providers e imports.
 */

// ===== IMPORTA√á√ïES =====

// @Module: decorador que marca uma classe como m√≥dulo do NestJS
import { Module } from '@nestjs/common';

// Controller e Service principais da aplica√ß√£o (geralmente b√°sicos)
import { AppController } from './app.controller';
import { AppService } from './app.service';

// Importa todos os m√≥dulos funcionais da aplica√ß√£o
import { AuthModule } from './auth/auth.module';          // M√≥dulo de autentica√ß√£o
import { UsersModule } from './users/users.module';      // M√≥dulo de usu√°rios
import { GroupModule } from './group/group.module';      // M√≥dulo de grupos
import { ChatModule } from './chat/chat.module';         // M√≥dulo de chat
import { BansModule } from './bans/bans.module';         // M√≥dulo de banimentos

// ConfigModule: para gerenciar vari√°veis de ambiente (.env)
import { ConfigModule } from '@nestjs/config';

// ===== DECORADOR @Module =====
// Define a configura√ß√£o do m√≥dulo principal
@Module({
  /*
   * IMPORTS: 
   * Lista todos os m√≥dulos que este m√≥dulo vai usar.
   * √â como dizer "minha empresa precisa destes departamentos funcionando"
   */
  imports: [
    AuthModule,           // M√≥dulo de autentica√ß√£o (login, logout, JWT)
    UsersModule,          // M√≥dulo de usu√°rios (criar, buscar, atualizar)
    GroupModule,          // M√≥dulo de grupos (criar grupos, adicionar membros)
    ChatModule,           // M√≥dulo de chat (mensagens privadas, arquivos)
    BansModule,           // M√≥dulo de banimentos (moderar usu√°rios)
    
    // ConfigModule.forRoot(): carrega vari√°veis de ambiente do arquivo .env
    ConfigModule.forRoot(),
    /*
     * CONFIGMODULE.FORROOT():
     * 
     * Este m√≥dulo permite usar vari√°veis de ambiente em toda aplica√ß√£o.
     * Vari√°veis de ambiente s√£o configura√ß√µes que ficam fora do c√≥digo,
     * como senhas, URLs de banco de dados, chaves secretas, etc.
     * 
     * EXEMPLO DE USO:
     * - JWT_SECRET=minha_chave_secreta (no arquivo .env)
     * - process.env.JWT_SECRET (no c√≥digo)
     * 
     * VANTAGENS:
     * - Seguran√ßa: senhas n√£o ficam no c√≥digo
     * - Flexibilidade: diferentes configura√ß√µes para dev/produ√ß√£o
     */
  ],
  
  /*
   * CONTROLLERS:
   * Lista os controllers que pertencem DIRETAMENTE a este m√≥dulo.
   * Geralmente o AppController √© b√°sico, s√≥ para testar se a API est√° funcionando.
   */
  controllers: [AppController],
  
  /*
   * PROVIDERS:
   * Lista os services que pertencem DIRETAMENTE a este m√≥dulo.
   * O AppService geralmente cont√©m fun√ß√µes b√°sicas como "Hello World".
   */
  providers: [AppService],
})
export class AppModule {
  /*
   * CLASSE VAZIA:
   * 
   * A classe AppModule geralmente fica vazia porque toda configura√ß√£o
   * √© feita no decorador @Module acima. O NestJS usa reflex√£o para
   * ler as configura√ß√µes do decorador e montar a aplica√ß√£o automaticamente.
   * 
   * √â como uma "planta baixa" - voc√™ s√≥ precisa desenhar, n√£o construir manualmente.
   */
}

/*
 * ====================================================================
 * RESUMO DO PAPEL DESTE ARQUIVO NO SISTEMA:
 * ====================================================================
 * 
 * O AppModule √© o "COORDENADOR GERAL" do WhatsUT. Ele:
 * 
 * 1. üèóÔ∏è ORGANIZA: Define estrutura modular da aplica√ß√£o
 * 2. üîó CONECTA: Liga todos os m√≥dulos entre si
 * 3. ‚öôÔ∏è CONFIGURA: Carrega configura√ß√µes de ambiente
 * 4. üéõÔ∏è CENTRALIZA: Ponto √∫nico de configura√ß√£o principal
 * 5. üöÄ INICIALIZA: Primeiro m√≥dulo carregado pelo NestJS
 * 
 * FLUXO DE INICIALIZA√á√ÉO:
 * 
 * main.ts chama NestFactory.create(AppModule)
 *     ‚Üì
 * NestJS carrega AppModule
 *     ‚Üì
 * AppModule importa AuthModule, UsersModule, etc.
 *     ‚Üì
 * Cada m√≥dulo importado carrega seus controllers/services
 *     ‚Üì
 * Sistema de inje√ß√£o de depend√™ncia conecta tudo
 *     ‚Üì
 * Aplica√ß√£o fica pronta para receber requisi√ß√µes
 * 
 * ARQUITETURA MODULAR:
 * 
 * AppModule (raiz)
 *     ‚îú‚îÄ‚îÄ AuthModule
 *     ‚îÇ   ‚îú‚îÄ‚îÄ AuthController
 *     ‚îÇ   ‚îú‚îÄ‚îÄ AuthService
 *     ‚îÇ   ‚îî‚îÄ‚îÄ JwtStrategy
 *     ‚îú‚îÄ‚îÄ UsersModule
 *     ‚îÇ   ‚îú‚îÄ‚îÄ UsersController
 *     ‚îÇ   ‚îú‚îÄ‚îÄ UsersService
 *     ‚îÇ   ‚îî‚îÄ‚îÄ UserRepository
 *     ‚îú‚îÄ‚îÄ ChatModule
 *     ‚îÇ   ‚îú‚îÄ‚îÄ ChatController
 *     ‚îÇ   ‚îú‚îÄ‚îÄ ChatService
 *     ‚îÇ   ‚îî‚îÄ‚îÄ ChatGateway
 *     ‚îî‚îÄ‚îÄ ... outros m√≥dulos
 * 
 * VANTAGENS DESTA ORGANIZA√á√ÉO:
 * - Separa√ß√£o clara de responsabilidades
 * - F√°cil manuten√ß√£o e extens√£o
 * - Reutiliza√ß√£o de m√≥dulos
 * - Testabilidade individual
 * - Carregamento sob demanda
 * 
 * SEM ESTE ARQUIVO:
 * O NestJS n√£o saberia como montar a aplica√ß√£o!
 * Seria como tentar construir um pr√©dio sem planta baixa.
 */
