/*
 * ====================================================================
 * ARQUIVO: jwt.strategy.ts
 * LOCALIZA√á√ÉO: src/auth/jwt.strategy.ts
 * ====================================================================
 * 
 * PROP√ìSITO DESTE ARQUIVO:
 * Este arquivo define COMO verificar e processar tokens JWT no WhatsUT.
 * √â como um "manual de instru√ß√µes" que ensina o sistema a ler e validar
 * as "pulseirinhas digitais" (tokens) que os usu√°rios apresentam.
 * 
 * ANALOGIA SIMPLES:
 * Imagine que voc√™ criou um sistema de pulseirinhas para um evento.
 * Este arquivo seria:
 * - O "leitor de pulseirinhas" que sabe como decodificar as informa√ß√µes
 * - O "manual" que diz onde procurar a pulseirinha (no pulso? no bolso?)
 * - A "chave secreta" para verificar se a pulseirinha √© leg√≠tima
 * 
 * RELA√á√ÉO COM OUTROS ARQUIVOS:
 * - JwtAuthGuard usa esta estrat√©gia para verificar tokens
 * - AuthService cria tokens que esta estrat√©gia vai verificar
 * - Qualquer rota protegida depende desta verifica√ß√£o
 * 
 * CONCEITO IMPORTANTE - JWT (JSON Web Token):
 * Um JWT √© como uma carteira de identidade digital que cont√©m:
 * - Quem voc√™ √© (payload com nome e ID)
 * - Quando expira (timestamp)
 * - Uma "assinatura digital" que prova que √© leg√≠timo
 */

// ===== IMPORTA√á√ïES =====

// @Injectable: marca como servi√ßo que pode ser injetado
import { Injectable } from '@nestjs/common';

// PassportStrategy: classe base para criar estrat√©gias de autentica√ß√£o
import { PassportStrategy } from '@nestjs/passport';

// ExtractJwt: utilit√°rios para extrair tokens de requisi√ß√µes HTTP
// Strategy: estrat√©gia espec√≠fica para tokens JWT
import { ExtractJwt, Strategy } from 'passport-jwt';

// ===== CLASSE JwtStrategy =====

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  /*
   * EXPLICA√á√ÉO DA HERAN√áA:
   * 
   * "extends PassportStrategy(Strategy)":
   * - PassportStrategy: classe que gerencia estrat√©gias de autentica√ß√£o
   * - Strategy: estrat√©gia espec√≠fica para JWT (importada do passport-jwt)
   * - √â como herdar um "modelo padr√£o" e personaliz√°-lo para nossas necessidades
   */

  // ===== CONSTRUTOR (CONFIGURA√á√ÉO DA ESTRAT√âGIA) =====
  constructor() {
    // super(): chama o construtor da classe pai (PassportStrategy)
    // Passa um objeto de configura√ß√£o que define COMO processar tokens
    super({
      
      // ===== CONFIGURA√á√ÉO 1: ONDE ENCONTRAR O TOKEN =====
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      /*
       * EXPLICA√á√ÉO DETALHADA:
       * 
       * ExtractJwt.fromAuthHeaderAsBearerToken() diz:
       * "Procure o token no header Authorization da requisi√ß√£o HTTP"
       * 
       * FORMATO ESPERADO:
       * Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       * 
       * OUTRAS OP√á√ïES POSS√çVEIS:
       * - ExtractJwt.fromBodyField('token'): buscar no corpo da requisi√ß√£o
       * - ExtractJwt.fromUrlQueryParameter('token'): buscar na query string
       * - ExtractJwt.fromCookies('jwt'): buscar nos cookies
       * 
       * Escolhemos o header Authorization porque √© o padr√£o de seguran√ßa mais usado
       */
      
      // ===== CONFIGURA√á√ÉO 2: CHAVE SECRETA PARA VERIFICAR ASSINATURA =====
      secretOrKey: process.env.JWT_SECRET || 'senhasemenv', // Cuidado com env
      /*
       * EXPLICA√á√ÉO DETALHADA:
       * 
       * Esta √© a "chave secreta" que usamos para:
       * 1. CRIAR tokens (no AuthService)
       * 2. VERIFICAR tokens (aqui na Strategy)
       * 
       * √â como a chave que assina documentos oficiais:
       * - Se algu√©m alterar o token, a assinatura n√£o vai bater
       * - S√≥ quem tem a chave secreta pode criar tokens v√°lidos
       * 
       * SEGURAN√áA IMPORTANTE:
       * - process.env.JWT_SECRET: busca a chave nas vari√°veis de ambiente
       * - 'senhasemenv': fallback caso n√£o tenha .env (APENAS PARA DESENVOLVIMENTO!)
       * - Em produ√ß√£o, SEMPRE use uma vari√°vel de ambiente segura
       * 
       * ONDE DEFINIR A VARI√ÅVEL:
       * Crie um arquivo .env na raiz do projeto:
       * JWT_SECRET=minha_chave_super_secreta_e_complexa_123456
       */
      
      // NOTA: N√£o definimos ignoreExpiration, ent√£o tokens expirados ser√£o rejeitados automaticamente
      // NOTA: N√£o definimos algorithms, ent√£o aceita o padr√£o (HS256)
    });
  }

  // ===== M√âTODO VALIDATE (PROCESSAR DADOS DO TOKEN) =====
  async validate(payload: any) {
    /*
     * QUANDO ESTA FUN√á√ÉO √â CHAMADA:
     * 
     * Esta fun√ß√£o √© executada automaticamente quando:
     * 1. Um token JWT √© encontrado na requisi√ß√£o
     * 2. O token passou na verifica√ß√£o de assinatura
     * 3. O token n√£o est√° expirado
     * 
     * Se chegou at√© aqui, o token √© V√ÅLIDO!
     * 
     * PAR√ÇMETRO payload:
     * √â o conte√∫do decodificado do token, ou seja, as informa√ß√µes
     * que foram colocadas no token quando ele foi criado.
     * 
     * No nosso caso, o payload cont√©m:
     * {
     *   name: "Jo√£o",           // Nome do usu√°rio
     *   sub: "user-123",        // ID do usu√°rio (sub = subject)
     *   iat: 1234567890,        // Quando foi criado (issued at)
     *   exp: 1234567890         // Quando expira (expiration)
     * }
     */
    
    // O que retornamos aqui ser√° colocado em req.user
    // nas rotas protegidas pelo JwtAuthGuard
    return { 
      id: payload.sub,    // Extra√≠mos o ID do usu√°rio (sub = subject)
      name: payload.name  // Extra√≠mos o nome do usu√°rio
    };
    
    /*
     * RESULTADO:
     * 
     * Ap√≥s esta fun√ß√£o, em qualquer rota protegida, voc√™ pode fazer:
     * 
     * @UseGuards(JwtAuthGuard)
     * @Post('alguma-rota')
     * minhaFuncao(@Request() req) {
     *   console.log(req.user); // { id: "user-123", name: "Jo√£o" }
     * }
     * 
     * √â como se o sistema automaticamente "anexasse" a identidade
     * do usu√°rio a cada requisi√ß√£o autenticada.
     */
  }
}

/*
 * ====================================================================
 * RESUMO DO PAPEL DESTE ARQUIVO NO SISTEMA:
 * ====================================================================
 * 
 * O JwtStrategy √© o "DECODIFICADOR DE IDENTIDADES" do WhatsUT. Ele:
 * 
 * 1. üîç LOCALIZA TOKENS: Sabe onde procurar o JWT na requisi√ß√£o HTTP
 * 2. üîê VERIFICA ASSINATURA: Usa a chave secreta para validar autenticidade
 * 3. ‚è∞ CONFERE EXPIRA√á√ÉO: Garante que o token ainda √© v√°lido
 * 4. üìã EXTRAI DADOS: Decodifica as informa√ß√µes do usu√°rio do token
 * 5. üé´ PREPARA CONTEXTO: Disponibiliza os dados em req.user
 * 
 * FLUXO COMPLETO:
 * 
 * 1. Frontend envia requisi√ß√£o com token:
 *    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 * 
 * 2. JwtAuthGuard intercepta e chama JwtStrategy
 * 
 * 3. JwtStrategy:
 *    - Extrai token do header Authorization
 *    - Verifica assinatura com a chave secreta
 *    - Confere se n√£o expirou
 *    - Decodifica payload: { name: "Jo√£o", sub: "123" }
 *    - Chama validate() com esse payload
 * 
 * 4. validate() retorna: { id: "123", name: "Jo√£o" }
 * 
 * 5. JwtAuthGuard coloca resultado em req.user
 * 
 * 6. Rota protegida pode usar req.user com dados do usu√°rio
 * 
 * SEM ESTE ARQUIVO: 
 * N√£o haveria como verificar se os tokens s√£o leg√≠timos!
 * Qualquer um poderia criar tokens falsos e se passar por outros usu√°rios.
 */
