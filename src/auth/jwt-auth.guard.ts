/*
 * ====================================================================
 * ARQUIVO: jwt-auth.guard.ts
 * LOCALIZA√á√ÉO: src/auth/jwt-auth.guard.ts
 * ====================================================================
 * 
 * PROP√ìSITO DESTE ARQUIVO:
 * Este arquivo √© o "SEGURAN√áA DA PORTA" do WhatsUT. Ele verifica se
 * a pessoa que est√° tentando acessar uma √°rea protegida realmente
 * tem permiss√£o para entrar (se tem um token JWT v√°lido).
 * 
 * ANALOGIA SIMPLES:
 * Imagine um clube exclusivo com v√°rias √°reas:
 * - √Årea p√∫blica (qualquer um pode entrar)
 * - √Årea VIP (s√≥ membros com pulseirinha)
 * 
 * Este arquivo seria o seguran√ßa que fica na porta da √°rea VIP
 * verificando as pulseirinhas. Se voc√™ tem uma pulseirinha v√°lida,
 * pode entrar. Se n√£o tem ou se a pulseirinha √© falsa, √© barrado.
 * 
 * QUANDO √â USADO:
 * Sempre que uma rota tem o decorador @UseGuards(JwtAuthGuard),
 * este arquivo √© executado ANTES da fun√ß√£o da rota.
 * 
 * EXEMPLO:
 * @UseGuards(JwtAuthGuard)  ‚Üê Aqui o guard √© ativado
 * @Post('logout')
 * async logout() { ... }
 * 
 * O QUE ACONTECE:
 * 1. Usu√°rio faz requisi√ß√£o para /auth/logout
 * 2. JwtAuthGuard verifica se o token √© v√°lido
 * 3. Se v√°lido: deixa continuar para a fun√ß√£o logout()
 * 4. Se inv√°lido: retorna erro 401 (Unauthorized)
 */

// ===== IMPORTA√á√ïES =====

// @Injectable: marca esta classe como um "servi√ßo" que pode ser injetado
import { Injectable } from '@nestjs/common';

// AuthGuard: classe base do Passport.js que faz a verifica√ß√£o de autentica√ß√£o
// Passport.js √© uma biblioteca muito popular para autentica√ß√£o em Node.js
import { AuthGuard } from '@nestjs/passport';

// ===== CLASSE JwtAuthGuard =====

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  /*
   * EXPLICA√á√ÉO DETALHADA:
   * 
   * Esta classe √© bem simples, mas muito poderosa!
   * 
   * 1. "extends AuthGuard('jwt')": 
   *    - Herda todas as funcionalidades da classe AuthGuard
   *    - O par√¢metro 'jwt' diz que queremos usar a estrat√©gia JWT
   *    - A estrat√©gia JWT est√° definida em jwt.strategy.ts
   * 
   * 2. Por que a classe est√° vazia?
   *    - Porque o AuthGuard j√° faz tudo que precisamos!
   *    - Ele automaticamente:
   *      * Pega o token do header Authorization
   *      * Verifica se o token √© v√°lido
   *      * Decodifica o token e extrai os dados do usu√°rio
   *      * Coloca os dados do usu√°rio em req.user
   *      * Permite ou nega o acesso
   * 
   * 3. Como funciona na pr√°tica:
   *    - Quando uma requisi√ß√£o chega em uma rota protegida
   *    - O NestJS chama automaticamente este guard
   *    - O guard verifica o header: Authorization: Bearer <token>
   *    - Se o token for v√°lido, a requisi√ß√£o continua
   *    - Se n√£o for, retorna erro 401
   * 
   * 4. Rela√ß√£o com jwt.strategy.ts:
   *    - Este guard usa a estrat√©gia definida em jwt.strategy.ts
   *    - A estrat√©gia define COMO verificar o token
   *    - Este guard define ONDE usar essa verifica√ß√£o
   * 
   * FLUXO COMPLETO:
   * 
   * Frontend envia: 
   * POST /auth/logout
   * Headers: { Authorization: "Bearer eyJ..." }
   *     ‚Üì
   * JwtAuthGuard intercepta a requisi√ß√£o
   *     ‚Üì
   * Guard pega o token do header Authorization
   *     ‚Üì
   * Guard chama JwtStrategy para validar o token
   *     ‚Üì
   * JwtStrategy verifica assinatura e expiraÔøΩÔøΩ√£o
   *     ‚Üì
   * Se v√°lido: Guard permite acesso + coloca dados em req.user
   * Se inv√°lido: Guard retorna erro 401
   *     ‚Üì
   * Se passou: fun√ß√£o logout() √© executada
   */
}

/*
 * ====================================================================
 * RESUMO DO PAPEL DESTE ARQUIVO NO SISTEMA:
 * ====================================================================
 * 
 * O JwtAuthGuard √© o "PORTEIRO DIGITAL" do WhatsUT. Ele:
 * 
 * 1. üõ°Ô∏è PROTEGE ROTAS: S√≥ deixa entrar quem tem token v√°lido
 * 2. üîç VERIFICA TOKENS: Confere se o JWT n√£o foi alterado ou expirou
 * 3. üë§ EXTRAI DADOS: Pega informa√ß√µes do usu√°rio do token
 * 4. üö´ BLOQUEIA INVASORES: Impede acesso n√£o autorizado
 * 5. üîÑ AUTOMATIZA SEGURAN√áA: Funciona sem c√≥digo adicional
 * 
 * ONDE √â USADO:
 * - Logout (precisa saber quem est√° saindo)
 * - Perfil (precisa saber de quem √© o perfil)
 * - Chat (s√≥ usu√°rios logados podem enviar mensagens)
 * - Grupos (s√≥ membros podem acessar)
 * - Qualquer rota que tenha @UseGuards(JwtAuthGuard)
 * 
 * SEM ESTE ARQUIVO: 
 * Qualquer pessoa poderia acessar √°reas protegidas sem fazer login!
 * Seria como um pr√©dio sem porteiro - qualquer um entraria.
 */
