/*
 * ====================================================================
 * ARQUIVO: auth.controller.ts
 * LOCALIZA√á√ÉO: src/auth/auth.controller.ts
 * ====================================================================
 * 
 * PROP√ìSITO DESTE ARQUIVO:
 * Este arquivo √© a "RECEP√á√ÉO" do sistema de autentica√ß√£o do WhatsUT.
 * √â aqui que chegam todas as requisi√ß√µes HTTP relacionadas a login, logout,
 * registro e consulta de perfil. Pense nele como a "mesa da recepcionista"
 * que recebe visitantes e os direciona para o departamento correto.
 * 
 * ANALOGIA SIMPLES:
 * Imagine um hospital. Este arquivo seria a recep√ß√£o que:
 * - Recebe pacientes que querem se cadastrar (registro)
 * - Recebe pacientes que querem ser atendidos (login)
 * - Direciona cada pessoa para o m√©dico certo (AuthService)
 * - Controla quem pode acessar certas √°reas (autentica√ß√£o)
 * 
 * DIFEREN√áA ENTRE CONTROLLER E SERVICE:
 * - CONTROLLER (este arquivo): recebe requisi√ß√µes HTTP, valida dados, chama o Service
 * - SERVICE (auth.service.ts): cont√©m a l√≥gica de neg√≥cio (verificar senha, gerar token)
 * 
 * √â como a diferen√ßa entre a recepcionista (controller) e o m√©dico (service):
 * - Recepcionista: recebe pacientes, organiza fichas, agenda consultas
 * - M√©dico: faz diagn√≥sticos, prescreve rem√©dios, trata pacientes
 */

// ===== IMPORTA√á√ïES (FERRAMENTAS VINDAS DE OUTROS LUGARES) =====

// Importa√ß√µes do NestJS - framework que estamos usando
import {
  Body,        // Para pegar dados do corpo da requisi√ß√£o HTTP (JSON)
  Controller,  // Decorador que marca esta classe como um "controlador"
  Get,         // Decorador para requisi√ß√µes GET (buscar dados)
  HttpCode,    // Para definir qual c√≥digo HTTP retornar (200, 201, 404, etc.)
  HttpStatus,  // Constantes com c√≥digos HTTP (OK = 200, CREATED = 201, etc.)
  Post,        // Decorador para requisi√ß√µes POST (enviar dados)
  Request,     // Para acessar dados da requisi√ß√£o HTTP
  UseGuards,   // Para usar "guardas" (verifica√ß√µes de seguran√ßa)
} from '@nestjs/common';

// Importa o servi√ßo de autentica√ß√£o (onde est√° a l√≥gica de neg√≥cio)
import { AuthService } from './auth.service';

// Importa os "moldes" (DTOs) que definem como os dados devem chegar
import { CreateUserDto } from '../users/dto/create-user.dto';  // Para criar usu√°rio
import { LoginDto } from './dto/login.dto';                    // Para fazer login

// Importa√ß√µes do Swagger (documenta√ß√£o autom√°tica da API)
import { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';

// Importa o "guarda" JWT que verifica se o usu√°rio est√° logado
import { JwtAuthGuard } from './jwt-auth.guard';

// Importa o servi√ßo que controla usu√°rios online
import { OnlineUsersService } from './online-users.service';

// ===== DECORADOR @Controller =====
// Este "r√≥tulo" diz para o NestJS: "Esta classe gerencia rotas HTTP que come√ßam com /auth"
// Todas as rotas deste arquivo ter√£o o prefixo /auth (ex: /auth/login, /auth/register)
@Controller('auth')
export class AuthController {
  
  // ===== CONSTRUTOR =====
  // Aqui "injetamos" o AuthService, ou seja, pedimos para o NestJS nos dar
  // uma inst√¢ncia do servi√ßo de autentica√ß√£o para podermos usar
  constructor(private authService: AuthService) {}
  // √â como pedir para a administra√ß√£o do hospital nos dar acesso ao m√©dico especialista

  // ===== ROTA: POST /auth/login (FAZER LOGIN) =====
  
  // @HttpCode: Define que esta rota retorna c√≥digo 200 (OK) quando der certo
  @HttpCode(HttpStatus.OK)
  
  // @ApiOperation: Documenta√ß√£o para o Swagger (ferramenta que gera documenta√ß√£o autom√°tica)
  @ApiOperation({ summary: 'Login do usu√°rio' })
  
  // @ApiResponse: Exemplo de resposta para documenta√ß√£o
  @ApiResponse({ 
    status: 200, 
    description: 'Login realizado com sucesso',
    example: {
      id: '98c24db0-532e-4b47-88c1-7572be9d7f05',
      name: 'Rafael Lechensque',
      access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    }
  })
  
  // @Post: Esta fun√ß√£o responde a requisi√ß√µes POST para /auth/login
  @Post('login')
  async signIn(@Body() signInDto: LoginDto) {
    // @Body(): pega os dados que vieram no corpo da requisi√ß√£o (nome e senha)
    // signInDto: os dados recebidos, organizados conforme o "molde" LoginDto
    // LoginDto define que deve ter: { name: string, password: string }
    
    // Chama o m√©todo signIn do AuthService, passando nome e senha
    // √â como a recepcionista ligar para o m√©dico e passar os dados do paciente
    return this.authService.signIn(signInDto.name, signInDto.password);
    
    // Esta fun√ß√£o vai retornar: { access_token: "...", user: { id, name, isOnline } }
    // O frontend recebe esse objeto e j√° tem tudo que precisa para funcionar
  }

  // ===== ROTA: POST /auth/logout (FAZER LOGOUT) =====
  
  // @ApiBearerAuth: Diz que esta rota precisa do token JWT no cabe√ßalho Authorization
  @ApiBearerAuth()
  
  @HttpCode(HttpStatus.OK)
  
  @ApiOperation({ summary: 'Logout do usu√°rio' })
  @ApiResponse({ 
    status: 200, 
    description: 'Logout realizado com sucesso',
    example: { message: 'Logout realizado com sucesso' }
  })
  
  // @UseGuards(JwtAuthGuard): S√≥ permite acesso se o usu√°rio estiver logado
  // √â como ter um seguran√ßa que verifica a pulseirinha antes de deixar entrar
  @UseGuards(JwtAuthGuard)
  
  @Post('logout')
  async singOut(@Request() req) {
    // @Request(): acessa dados da requisi√ß√£o HTTP
    // req.user: dados do usu√°rio que foram colocados pelo JwtAuthGuard
    // O guard j√° verificou o token e colocou os dados do usu√°rio em req.user
    
    // Chama o logout passando o ID do usu√°rio
    return this.authService.singOut(req.user.id);
  }

  // ===== ROTA: POST /auth/register (CRIAR NOVA CONTA) =====
  
  // @HttpCode: Esta rota retorna 201 (CREATED) quando criar um usu√°rio com sucesso
  @HttpCode(HttpStatus.CREATED)
  
  @ApiOperation({ summary: 'Registro de novo usu√°rio' })
  @ApiResponse({ 
    status: 201, 
    description: 'Usu√°rio criado com sucesso',
    example: {
      id: '98c24db0-532e-4b47-88c1-7572be9d7f05',
      name: 'Rafael Lechensque',
      access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    }
  })
  
  @Post('register')
  async register(@Body() body: CreateUserDto) {
    // @Body(): pega os dados do novo usu√°rio (nome, senha, etc.)
    // CreateUserDto: o "molde" que define como os dados devem ser enviados
    // Deve conter: { name: string, password: string } no m√≠nimo
    
    // Repassa os dados para o AuthService criar o usu√°rio
    return this.authService.register(body);
    
    // O AuthService vai chamar o UsersService que vai:
    // 1. Criptografar a senha
    // 2. Gerar um ID √∫nico
    // 3. Salvar no arquivo CSV
    // 4. Retornar os dados do usu√°rio criado
  }

  // ===== ROTA: GET /auth/profile (VER PERFIL) =====
  // NOTA: Esta rota existe mas n√£o √© mais necess√°ria no fluxo atual!
  // O login j√° retorna os dados do usu√°rio, ent√£o o frontend n√£o precisa
  // fazer uma segunda chamada para pegar o perfil.
  
  @ApiBearerAuth()  // Precisa estar logado (ter token)
  
  @ApiOperation({ summary: 'Obter perfil do usu√°rio autenticado' })
  @ApiResponse({
    status: 200,
    description: 'Perfil do usu√°rio',
    example: {
      id: '98c24db0-532e-4b47-88c1-7572be9d7f05',
      name: 'Rafael Lechensque',
    },
  })
  
  @UseGuards(JwtAuthGuard)  // S√≥ funciona se estiver logado
  @Get('profile')
  getProfile(@Request() req) {
    // Esta fun√ß√£o simplesmente retorna os dados do usu√°rio que j√° est√£o
    // dispon√≠veis em req.user (colocados l√° pelo JwtAuthGuard)
    
    // O JwtAuthGuard j√° verificou o token e extraiu os dados do usu√°rio
    // Ent√£o s√≥ precisamos retornar esses dados
    return req.user;
    
    // OBSERVA√á√ÉO IMPORTANTE:
    // Esta rota ainda existe para compatibilidade, mas no fluxo atual
    // o frontend recebe os dados do usu√°rio direto no login, ent√£o
    // esta chamada adicional n√£o √© mais necess√°ria
  }
}

/*
 * ====================================================================
 * RESUMO DO PAPEL DESTE ARQUIVO NO SISTEMA:
 * ====================================================================
 * 
 * O AuthController √© a "PORTA DE ENTRADA" para autentica√ß√£o no WhatsUT. Ele:
 * 
 * 1. üåê RECEBE REQUISI√á√ïES HTTP: Do frontend, mobile, etc.
 * 2. ‚úÖ VALIDA DADOS: Verifica se os dados chegaram no formato correto
 * 3. üîÑ DELEGA PARA O SERVICE: Repassa o trabalho pesado para AuthService
 * 4. üì§ RETORNA RESPOSTAS: Envia de volta os resultados para quem pediu
 * 5. üõ°Ô∏è APLICA SEGURAN√áA: Usa guards para proteger rotas que precisam de login
 * 
 * FLUXO T√çPICO DE UMA REQUISI√á√ÉO:
 * 
 * Frontend faz POST /auth/login com { name: "Jo√£o", password: "123" }
 *     ‚Üì
 * AuthController.signIn() recebe os dados
 *     ‚Üì
 * Chama AuthService.signIn("Jo√£o", "123")
 *     ‚Üì
 * AuthService verifica senha e gera token
 *     ‚Üì
 * AuthController retorna { access_token: "...", user: {...} }
 *     ‚Üì
 * Frontend recebe a resposta e salva o token
 * 
 * ROTAS DISPON√çVEIS:
 * - POST /auth/login    ‚Üí Fazer login (p√∫blico)
 * - POST /auth/logout   ‚Üí Fazer logout (protegido)
 * - POST /auth/register ‚Üí Criar conta (p√∫blico)
 * - GET /auth/profile   ‚Üí Ver perfil (protegido, opcional)
 * 
 * SEM ESTE ARQUIVO: N√£o haveria como o frontend se comunicar com o backend!
 */
