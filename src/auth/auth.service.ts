/**
 * üîê SERVI√áO DE AUTENTICA√á√ÉO - AUTH.SERVICE.TS
 * 
 * ANALOGIA: Imagine este arquivo como o "porteiro de um pr√©dio" do WhatsUT.
 * Ele √© respons√°vel por verificar se as pessoas podem entrar (login), 
 * registrar novos moradores (cadastro) e controlar quem est√° dentro (logout).
 * 
 * FUN√á√ÉO NO PROJETO: Este arquivo cont√©m toda a l√≥gica de seguran√ßa do sistema.
 * Ele verifica senhas, gera "cart√µes de acesso" (tokens JWT) e gerencia quem est√° online.
 */

// üì¶ IMPORTA√á√ïES - Como pedir emprestado ferramentas de outros lugares
import { Injectable, UnauthorizedException } from '@nestjs/common';
// Injectable: Marca esta classe como um "servi√ßo" que pode ser usado em outros lugares
// UnauthorizedException: Um tipo especial de erro para quando algu√©m n√£o tem permiss√£o

import { UsersService } from '../users/users.service';
// Importa o servi√ßo que gerencia usu√°rios (buscar, criar, etc.)
// √â como chamar o "departamento de usu√°rios" para ajudar

import { JwtService } from '@nestjs/jwt';
// Importa o servi√ßo que cria e verifica tokens JWT
// JWT √© como um "cart√£o de acesso tempor√°rio" que prova que voc√™ fez login

import * as bcrypt from 'bcrypt';
// Bcrypt √© uma biblioteca para criptografar senhas
// √â como um "cofre super seguro" que transforma senhas em c√≥digos imposs√≠veis de decifrar

import { CreateUserDto } from '../users/dto/create-user.dto';
// DTO = Data Transfer Object (Objeto de Transfer√™ncia de Dados)
// √â como um "formul√°rio padronizado" que define como os dados de um novo usu√°rio devem chegar

import { OnlineUsersService } from './online-users.service';
// Servi√ßo que controla quais usu√°rios est√£o online no momento
// √â como uma "lista de presen√ßa" em tempo real

// üè∑Ô∏è DECORADOR @Injectable - Marca esta classe como um "servi√ßo"
// Isso permite que o NestJS gerencie automaticamente esta classe e a use em outros lugares
@Injectable()
export class AuthService {
  
  /**
   * üèóÔ∏è CONSTRUTOR - Como montar o "porteiro" com todas as ferramentas necess√°rias
   * 
   * ANALOGIA: Imagine que voc√™ est√° contratando um porteiro para um pr√©dio.
   * Voc√™ precisa dar a ele: a lista de moradores, a m√°quina de fazer cart√µes de acesso,
   * e um quadro para marcar quem est√° dentro do pr√©dio.
   */
  constructor(
    // private = s√≥ esta classe pode usar esta ferramenta
    // usersService = a ferramenta para gerenciar usu√°rios (buscar, criar, etc.)
    private usersService: UsersService,
    
    // jwtService = a ferramenta para criar "cart√µes de acesso" (tokens)
    private jwtService: JwtService,
    
    // onlineUsers = a ferramenta para controlar quem est√° online
    private onlineUsers: OnlineUsersService,
  ) {}
  // O constructor est√° vazio porque s√≥ estamos declarando as ferramentas, n√£o fazendo nada ainda

  /**
   * üìù M√âTODO REGISTER - Cadastrar um novo usu√°rio
   * 
   * ANALOGIA: √â como um formul√°rio de "cadastro de novo morador".
   * Voc√™ preenche seus dados e o porteiro os envia para o departamento de usu√°rios processar.
   */
  async register(createUser: CreateUserDto) {
    // async = esta fun√ß√£o pode demorar um pouco (acessa banco de dados)
    // createUser = os dados do novo usu√°rio que chegaram do formul√°rio
    // CreateUserDto = o "formato padronizado" dos dados (nome, senha, etc.)
    
    // Simplesmente repassa os dados para o servi√ßo de usu√°rios criar a conta
    // √â como o porteiro entregar o formul√°rio para o departamento respons√°vel
    return this.usersService.create(createUser);
  }

  /**
   * üîì M√âTODO SIGNIN - Fazer login (entrar no sistema)
   * 
   * ANALOGIA: √â como chegar na portaria e mostrar seus documentos.
   * O porteiro verifica se voc√™ √© realmente quem diz ser e, se for,
   * te d√° um cart√£o de acesso tempor√°rio para circular pelo pr√©dio.
   */
  async signIn(username: string, pass: string) {
    // async = pode demorar (precisa consultar base de dados)
    // username = nome do usu√°rio (como o nome na campainha)
    // pass = senha (como a chave do apartamento)
    
    // 1Ô∏è‚É£ BUSCAR O USU√ÅRIO - Procurar na lista de moradores
    const user = await this.usersService.findOne(username);
    // await = espera a busca terminar antes de continuar
    // √â como o porteiro consultar a lista de moradores para ver se voc√™ est√° cadastrado
    
    // 2Ô∏è‚É£ VERIFICAR CREDENCIAIS - Conferir se a senha est√° correta
    // if (user?.password !== pass) { // LINHA COMENTADA - vers√£o antiga (insegura)
    
    // Verifica√ß√£o em duas partes:
    if (!user || !(await bcrypt.compare(pass, user.password))) {
      // !user = se n√£o encontrou o usu√°rio na lista
      // || = OU (operador l√≥gico)
      // !(await bcrypt.compare(...)) = se a senha n√£o confere
      
      // bcrypt.compare = compara a senha digitada com a senha criptografada salva
      // √â como usar uma "m√°quina especial" que consegue verificar se duas senhas s√£o iguais
      // sem revelar qual √© a senha real (por seguran√ßa)
      
      // Se chegou aqui, ou o usu√°rio n√£o existe OU a senha est√° errada
      throw new UnauthorizedException('Credenciais inv√°lidas');
      // throw = lan√ßa um erro (como acionar um alarme)
      // UnauthorizedException = tipo de erro espec√≠fico para "acesso negado"
    }

    // 3Ô∏è‚É£ MARCAR COMO ONLINE - Anotar que a pessoa entrou no pr√©dio
    this.onlineUsers.addUser(user.id);
    // √â como marcar na lista de presen√ßa que esta pessoa est√° dentro do pr√©dio agora

    // 4Ô∏è‚É£ CRIAR O TOKEN (CART√ÉO DE ACESSO) - Preparar os dados para o cart√£o
    const payload = { name: user.name, sub: user.id };
    // payload = as informa√ß√µes que v√£o dentro do "cart√£o de acesso"
    // name = nome da pessoa (para identifica√ß√£o)
    // sub = "subject" (o ID √∫nico da pessoa no sistema)
    
    // 5Ô∏è‚É£ RETORNAR O RESULTADO - Entregar o cart√£o de acesso e os dados da pessoa
    return { 
      // O que esta fun√ß√£o vai devolver para quem a chamou:
      
      access_token: this.jwtService.sign(payload),
      // access_token = o "cart√£o de acesso" digital
      // this.jwtService.sign(payload) = criar o cart√£o com as informa√ß√µes da pessoa
      // √â como usar uma m√°quina especial que imprime cart√µes de acesso seguros
      
      user: {
        // Dados b√°sicos da pessoa que fez login (para mostrar na tela)
        id: user.id,           // N√∫mero de identifica√ß√£o √∫nico
        name: user.name,       // Nome da pessoa
        isOnline: true         // Marcando que est√° online agora
      }
    };
    // Esta fun√ß√£o retorna tanto o "cart√£o de acesso" quanto os dados da pessoa
    // Assim, o frontend recebe tudo de uma vez e n√£o precisa fazer outra consulta
  }

  /**
   * üö™ M√âTODO SIGNOUT - Fazer logout (sair do sistema)
   * 
   * ANALOGIA: √â como devolver o cart√£o de acesso na portaria ao sair do pr√©dio.
   * O porteiro anota que voc√™ saiu e remove seu nome da lista de pessoas presentes.
   */
  async singOut(id: string) {
    // async = pode demorar um pouco
    // id = o n√∫mero de identifica√ß√£o da pessoa que quer sair
    
    // Remove a pessoa da lista de "quem est√° online"
    this.onlineUsers.removeUser(id);
    // √â como riscar o nome da pessoa da lista de presen√ßa
    
    // Retorna uma mensagem de confirma√ß√£o
    return 'Sucesso';
    // Simples confirma√ß√£o de que o logout foi realizado
  }
}

/**
 * üìã RESUMO DO PAPEL DESTE ARQUIVO NO SISTEMA:
 * 
 * O AuthService √© o "CORA√á√ÉO DA SEGURAN√áA" do WhatsUT. Ele:
 * 
 * 1. üîê CONTROLA ACESSO: Decide quem pode entrar no sistema
 * 2. üé´ GERA TOKENS: Cria "cart√µes de acesso" digitais para usu√°rios autenticados
 * 3. üë• GERENCIA CADASTROS: Processa novos usu√°rios
 * 4. üìä MONITORA PRESEN√áA: Controla quem est√° online
 * 5. üõ°Ô∏è PROTEGE SENHAS: Usa criptografia para manter senhas seguras
 * 
 * RELA√á√ÉO COM OUTROS ARQUIVOS:
 * - √â USADO por: auth.controller.ts (que recebe as requisi√ß√µes HTTP)
 * - USA: users.service.ts (para gerenciar usu√°rios)
 * - USA: JWT Service (para tokens)
 * - USA: OnlineUsers Service (para controle de presen√ßa)
 * 
 * SEM ESTE ARQUIVO: Qualquer pessoa poderia acessar o sistema sem fazer login!
 */
