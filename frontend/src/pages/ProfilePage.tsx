/*
 * ========================================================================================
 * PROFILE PAGE - P√ÅGINA DE PERFIL DO USU√ÅRIO
 * ========================================================================================
 * 
 * üéØ CONCEITO: Profile Page (P√°gina de Perfil)
 * Esta p√°gina permite ao usu√°rio visualizar e editar suas informa√ß√µes pessoais.
 * √â como uma "carteira de identidade digital" onde o usu√°rio pode ver e alterar
 * seus dados b√°sicos dentro da aplica√ß√£o.
 * 
 * üë§ FUNCIONALIDADES PRINCIPAIS:
 * - Exibir informa√ß√µes do usu√°rio logado
 * - Permitir edi√ß√£o do nome (modo inline editing)
 * - Mostrar dados como email, data de cria√ß√£o, tipo de usu√°rio
 * - Interface responsiva e intuitiva
 * - Valida√ß√£o de usu√°rio autenticado
 * 
 * üé® CARACTER√çSTICAS DA UI:
 * - Design clean com cards
 * - Avatar circular com inicial do nome
 * - Modo de edi√ß√£o inline (clica para editar)
 * - Bot√µes de salvar/cancelar
 * - Estados de carregamento e erro
 * 
 * üèóÔ∏è ANALOGIA: 
 * √â como a p√°gina "Minha Conta" de qualquer site:
 * - Mostra suas informa√ß√µes pessoais
 * - Permite alterar dados edit√°veis
 * - Mant√©m dados importantes protegidos
 * - Interface familiar e intuitiva
 */

// ============================================================================
// IMPORTA√á√ïES: HOOKS, CONTEXTOS E COMPONENTES
// ============================================================================

/*
 * üìö IMPORTA√á√ïES EXPLICADAS:
 * 
 * ‚öõÔ∏è React Hooks:
 * - useState: Para gerenciar estado local (modo edi√ß√£o, valores editados)
 * 
 * üîê Contexts:
 * - useAuth: Para acessar dados do usu√°rio autenticado
 * 
 * üß© Componentes UI:
 * - Card, CardHeader, CardContent: Componentes de layout reutiliz√°veis
 * 
 * üé® √çcones (Lucide React):
 * - User: √çcone de usu√°rio
 * - Calendar: √çcone de data
 * - Shield: √çcone de seguran√ßa/admin
 * - Edit3: √çcone de edi√ß√£o
 * - Save: √çcone de salvar
 * - X: √çcone de cancelar
 */
import { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Card, CardHeader, CardContent } from '../components/ui';
import { User, Calendar, Shield, Edit3, Save, X } from 'lucide-react';

// ============================================================================
// COMPONENTE PRINCIPAL: PROFILEPAGE
// ============================================================================

/*
 * üèõÔ∏è FUN√á√ÉO PROFILEPAGE
 * 
 * Componente funcional que renderiza a p√°gina de perfil do usu√°rio.
 * Gerencia estado local para edi√ß√£o inline e integra com contexto de autentica√ß√£o.
 * 
 * üîÑ FLUXO PRINCIPAL:
 * 1. Verifica se usu√°rio est√° autenticado
 * 2. Exibe informa√ß√µes do perfil
 * 3. Permite edi√ß√£o inline do nome
 * 4. Gerencia salvamento/cancelamento de edi√ß√µes
 */
function ProfilePage() {
  
  // ========================================================================
  // HOOKS E ESTADO LOCAL
  // ========================================================================
  
  /*
   * üîê HOOK DE AUTENTICA√á√ÉO
   * 
   * Extrai dados do usu√°rio atual do contexto de autentica√ß√£o.
   * O usu√°rio cont√©m: id, name, email, userType, createdAt, etc.
   */
  const { user } = useAuth();
  
  /*
   * ‚úèÔ∏è ESTADO DE EDI√á√ÉO
   * 
   * üéØ isEditing: Controla se o usu√°rio est√° no modo de edi√ß√£o
   * - false: Modo visualiza√ß√£o (padr√£o)
   * - true: Modo edi√ß√£o (campos edit√°veis)
   * 
   * üí° PADR√ÉO INLINE EDITING:
   * Permite editar diretamente na interface sem ir para p√°gina separada.
   * Mais intuitivo e r√°pido para pequenas edi√ß√µes.
   */
  const [isEditing, setIsEditing] = useState(false);
  
  /*
   * üìù ESTADO DO NOME EDITADO
   * 
   * üéØ editedName: Armazena valor tempor√°rio do nome durante edi√ß√£o
   * 
   * üîÑ FLUXO:
   * 1. Inicializa com nome atual do usu√°rio
   * 2. Durante edi√ß√£o, armazena valor tempor√°rio
   * 3. Ao salvar, envida para API
   * 4. Ao cancelar, reverte para valor original
   * 
   * üí° DEFENSIVE PROGRAMMING:
   * user?.name || '' garante que sempre temos uma string,
   * mesmo se user for null ou name for undefined.
   */
  const [editedName, setEditedName] = useState(user?.name || '');

  // ========================================================================
  // GUARDA DE AUTENTICA√á√ÉO
  // ========================================================================
  
  /*
   * üõ°Ô∏è VERIFICA√á√ÉO DE USU√ÅRIO AUTENTICADO
   * 
   * Se n√£o h√° usu√°rio logado, mostra uma mensagem amig√°vel
   * ao inv√©s de quebrar a aplica√ß√£o.
   * 
   * üéØ PADR√ÉO EARLY RETURN:
   * Retorna interface alternativa se condi√ß√£o n√£o √© atendida.
   * Evita aninhamento excessivo de condicionais.
   */
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <Card className="max-w-md w-full shadow-lg">
          <CardContent>
            <div className="text-center py-8">
              <p className="text-gray-500">Usu√°rio n√£o autenticado.</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // ========================================================================
  // HANDLERS DE A√á√ïES
  // ========================================================================
  
  /*
   * üíæ HANDLER: SALVAR EDI√á√ÉO
   * 
   * Fun√ß√£o executada quando usu√°rio clica em "Salvar" ap√≥s editar o nome.
   * 
   * üîÑ FLUXO ATUAL:
   * 1. Log do valor editado (desenvolvimento)
   * 2. Sai do modo de edi√ß√£o
   * 3. TODO: Enviar para API real
   * 
   * üöß IMPLEMENTA√á√ÉO FUTURA:
   * - Valida√ß√£o do nome (comprimento, caracteres permitidos)
   * - Chamada para API de atualiza√ß√£o de perfil
   * - Tratamento de erros de rede
   * - Atualiza√ß√£o do contexto de autentica√ß√£o
   * - Feedback visual de sucesso/erro
   */
  const handleSaveEdit = () => {
    // üìù Log para desenvolvimento
    console.log('Salvando perfil:', editedName);
    
    // üîÑ Sair do modo de edi√ß√£o
    setIsEditing(false);
    
    // üöß TODO: Implementar integra√ß√£o com API
    // try {
    //   await api.updateProfile({ name: editedName });
    //   updateUserInContext({ ...user, name: editedName });
    //   toast.success('Perfil atualizado com sucesso!');
    // } catch (error) {
    //   toast.error('Erro ao atualizar perfil');
    //   setEditedName(user.name); // Reverter em caso de erro
    // }
  };

  /*
   * ‚ùå HANDLER: CANCELAR EDI√á√ÉO
   * 
   * Fun√ß√£o executada quando usu√°rio clica em "Cancelar" durante edi√ß√£o.
   * 
   * üîÑ FLUXO:
   * 1. Reverte valor editado para valor original
   * 2. Sai do modo de edi√ß√£o
   * 
   * üí° USER EXPERIENCE:
   * Permite ao usu√°rio "desfazer" mudan√ßas n√£o salvas,
   * dando sensa√ß√£o de seguran√ßa ao experimentar edi√ß√µes.
   */
  const handleCancelEdit = () => {
    setEditedName(user.name);  // üîÑ Reverter para valor original
    setIsEditing(false);       // ‚ùå Sair do modo edi√ß√£o
  };

  // ========================================================================
  // RENDERIZA√á√ÉO DA INTERFACE
  // ========================================================================
  
  /*
   * üé® ESTRUTURA VISUAL DA P√ÅGINA
   * 
   * Layout responsivo com:
   * - Container centralizado com largura m√°xima
   * - Card principal com sombra
   * - Header com avatar e t√≠tulo
   * - Content com informa√ß√µes detalhadas
   */
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4">
        <Card className="shadow-lg">
          
          {/* ============================================================
               HEADER: AVATAR E T√çTULO
               ============================================================ */}
          
          <CardHeader>
            <div className="text-center">
              
              {/* üë§ AVATAR CIRCULAR */}
              {/*
               * üé® AVATAR BASEADO NA INICIAL DO NOME
               * 
               * üéØ CARACTER√çSTICAS:
               * - C√≠rculo verde com inicial do nome
               * - Tamanho fixo (24x24 = 96px)
               * - Centralizado horizontalmente
               * - Primeira letra mai√∫scula
               * 
               * üí° FALLBACK ELEGANTE:
               * Se n√£o houver foto de perfil, usa inicial do nome.
               * Solu√ß√£o comum em aplica√ß√µes modernas.
               */}
              <div className="w-24 h-24 bg-green-500 rounded-full flex items-center justify-center text-white text-2xl font-bold mx-auto mb-4">
                {user.name.charAt(0).toUpperCase()}
              </div>
              
              {/* üìù T√çTULO E DESCRI√á√ÉO */}
              <h2 className="text-2xl font-bold text-gray-900">Meu Perfil</h2>
              <p className="text-gray-600">Gerencie suas informa√ß√µes pessoais</p>
            </div>
          </CardHeader>
          
          {/* ============================================================
               CONTENT: INFORMA√á√ïES DETALHADAS
               ============================================================ */}
          
          <CardContent>
            
            {/* üìã LISTA DE INFORMA√á√ïES DO PERFIL */}
            {/*
             * üé® LAYOUT:
             * - Espa√ßamento vertical entre items
             * - Grid responsivo com √≠cones
             * - Separadores visuais
             */}
            <div className="space-y-6">
              
              {/* ========================================================
                   CAMPO: NOME (EDIT√ÅVEL)
                   ======================================================== */}
              
              <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <User className="w-5 h-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Nome</p>
                    
                    {/* üîÑ RENDERIZA√á√ÉO CONDICIONAL: MODO VISUALIZA√á√ÉO vs EDI√á√ÉO */}
                    {/*
                     * üí° PADR√ÉO INLINE EDITING:
                     * - Modo visualiza√ß√£o: Mostra nome + bot√£o editar
                     * - Modo edi√ß√£o: Mostra input + bot√µes salvar/cancelar
                     */}
                    {isEditing ? (
                      // üìù MODO EDI√á√ÉO: INPUT + BOT√ïES
                      <div className="flex items-center space-x-2">
                        {/*
                         * üìù INPUT DE EDI√á√ÉO
                         * 
                         * üéØ CARACTER√çSTICAS:
                         * - Valor controlado (editedName)
                         * - Estilo consistente com design system
                         * - Foco autom√°tico seria ideal (autoFocus)
                         * - Enter para salvar seria UX melhor
                         */}
                        <input
                          type="text"
                          value={editedName}
                          onChange={(e) => setEditedName(e.target.value)}
                          className="px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                          placeholder="Digite seu nome"
                        />
                        
                        {/* üíæ BOT√ÉO SALVAR */}
                        <button
                          onClick={handleSaveEdit}
                          className="p-1 text-green-600 hover:text-green-700 transition-colors"
                          title="Salvar altera√ß√µes"
                        >
                          <Save className="w-4 h-4" />
                        </button>
                        
                        {/* ‚ùå BOT√ÉO CANCELAR */}
                        <button
                          onClick={handleCancelEdit}
                          className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
                          title="Cancelar edi√ß√£o"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ) : (
                      // üëÅÔ∏è MODO VISUALIZA√á√ÉO: NOME + BOT√ÉO EDITAR
                      <div className="flex items-center space-x-2">
                        <p className="font-medium text-gray-900">{user.name}</p>
                        
                        {/* ‚úèÔ∏è BOT√ÉO EDITAR */}
                        <button
                          onClick={() => setIsEditing(true)}
                          className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
                          title="Editar nome"
                        >
                          <Edit3 className="w-4 h-4" />
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* ========================================================
                   CAMPO: EMAIL (SOMENTE LEITURA)
                   ======================================================== */}
              
              <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                <User className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Email</p>
                  <p className="font-medium text-gray-900">{user.email}</p>
                </div>
              </div>

              {/* ========================================================
                   CAMPO: TIPO DE USU√ÅRIO (SOMENTE LEITURA)
                   ======================================================== */}
              
              <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                <Shield className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Tipo de Usu√°rio</p>
                  {/*
                   * üé® BADGE COLORIDO BASEADO NO TIPO
                   * 
                   * üí° MAPEAMENTO VISUAL:
                   * - admin: Badge azul (autoridade)
                   * - user: Badge verde (padr√£o)
                   * - Outros: Badge cinza (neutro)
                   * 
                   * üîß CAPITALIZA√á√ÉO:
                   * Transforma primeira letra em mai√∫scula para melhor apresenta√ß√£o.
                   */}
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    user.userType === 'admin' 
                      ? 'bg-blue-100 text-blue-800' 
                      : user.userType === 'user'
                      ? 'bg-green-100 text-green-800'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {user.userType.charAt(0).toUpperCase() + user.userType.slice(1)}
                  </span>
                </div>
              </div>

              {/* ========================================================
                   CAMPO: DATA DE CRIA√á√ÉO (SOMENTE LEITURA)
                   ======================================================== */}
              
              <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                <Calendar className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Membro desde</p>
                  {/*
                   * üìÖ FORMATA√á√ÉO DE DATA
                   * 
                   * üéØ CONVERS√ÉO:
                   * - user.createdAt pode ser string ISO ou Date
                   * - new Date() garante convers√£o para Date object
                   * - toLocaleDateString() formata para padr√£o brasileiro
                   * 
                   * üí° LOCALIZA√á√ÉO:
                   * 'pt-BR' garante formato DD/MM/AAAA familiar aos usu√°rios brasileiros.
                   */}
                  <p className="font-medium text-gray-900">
                    {new Date(user.createdAt).toLocaleDateString('pt-BR')}
                  </p>
                </div>
              </div>
            </div>
            
            {/* ============================================================
                 SE√á√ÉO: A√á√ïES ADICIONAIS
                 ============================================================ */}
            
            {/*
             * üöß √ÅREA PARA FUTURAS FUNCIONALIDADES
             * 
             * üí° POSS√çVEIS ADI√á√ïES:
             * - Alterar senha
             * - Upload de foto de perfil
             * - Configura√ß√µes de privacidade
             * - Exportar dados pessoais
             * - Excluir conta
             */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Configura√ß√µes da Conta</h3>
              <div className="space-y-3">
                <button className="w-full text-left p-3 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors border border-gray-200">
                  üîí Alterar Senha
                </button>
                <button className="w-full text-left p-3 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors border border-gray-200">
                  üñºÔ∏è Alterar Foto de Perfil
                </button>
                <button className="w-full text-left p-3 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors border border-gray-200">
                  üîê Configura√ß√µes de Privacidade
                </button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default ProfilePage;

/*
 * ========================================================================================
 * üìö RESUMO EDUCACIONAL - PROFILE PAGE
 * ========================================================================================
 * 
 * üéØ O QUE APRENDEMOS:
 * 
 * 1. üé® INLINE EDITING PATTERN:
 *    - Edi√ß√£o direta na interface sem modais ou p√°ginas separadas
 *    - Estados de visualiza√ß√£o vs edi√ß√£o
 *    - Bot√µes de salvar/cancelar contextuais
 *    - UX mais fluida e intuitiva
 * 
 * 2. üõ°Ô∏è DEFENSIVE PROGRAMMING:
 *    - Verifica√ß√£o de usu√°rio autenticado
 *    - Fallbacks para dados opcionais (user?.name || '')
 *    - Early returns para condi√ß√µes especiais
 *    - Interface alternativa para estados de erro
 * 
 * 3. üìä STATE MANAGEMENT LOCAL:
 *    - useState para modo de edi√ß√£o
 *    - Estado tempor√°rio para valores editados
 *    - Sincroniza√ß√£o com props do contexto
 *    - Revers√£o de mudan√ßas n√£o salvas
 * 
 * 4. üé≠ RENDERIZA√á√ÉO CONDICIONAL:
 *    - Diferentes UIs baseadas no estado
 *    - Componentes que se transformam dinamicamente
 *    - Feedback visual imediato
 * 
 * 5. üé® DESIGN SYSTEM CONSISTENCY:
 *    - Reutiliza√ß√£o de componentes UI (Card, Button)
 *    - √çcones consistentes (Lucide React)
 *    - Paleta de cores padronizada
 *    - Espa√ßamentos e tipografia consistentes
 * 
 * üí° EXEMPLO PR√ÅTICO DE FLUXO:
 * 
 * VISUALIZA√á√ÉO INICIAL:
 * 1. üë§ Usu√°rio acessa p√°gina de perfil
 * 2. üìä Sistema verifica autentica√ß√£o
 * 3. üé® Renderiza informa√ß√µes do perfil
 * 4. üëÅÔ∏è Nome exibido com √≠cone de editar
 * 
 * PROCESSO DE EDI√á√ÉO:
 * 1. ‚úèÔ∏è Usu√°rio clica em editar nome
 * 2. üîÑ Estado muda para isEditing=true
 * 3. üìù Input aparece com valor atual
 * 4. üë§ Usu√°rio digita novo nome
 * 5. üíæ Usu√°rio clica salvar OU ‚ùå clica cancelar
 * 6. üîÑ Estado volta para visualiza√ß√£o
 * 
 * üìà MELHORIAS POSS√çVEIS:
 * 
 * üöÄ UX ENHANCEMENTS:
 * - AutoFocus no input ao entrar em edi√ß√£o
 * - Enter para salvar, Escape para cancelar
 * - Loading state durante salvamento
 * - Valida√ß√£o em tempo real
 * 
 * üîß FUNCIONALIDADES:
 * - Upload de avatar
 * - Altera√ß√£o de senha
 * - Configura√ß√µes de notifica√ß√£o
 * - Tema claro/escuro
 * - Exporta√ß√£o de dados
 * 
 * üõ°Ô∏è SEGURAN√áA:
 * - Valida√ß√£o de campos no frontend
 * - Sanitiza√ß√£o de inputs
 * - Rate limiting para updates
 * - Confirma√ß√£o para a√ß√µes destrutivas
 * 
 * üîó PR√ìXIMOS PASSOS:
 * Agora que entendemos como fazer uma p√°gina de perfil completa, podemos aplicar
 * os mesmos padr√µes em outras p√°ginas:
 * - Settings Page (configura√ß√µes globais)
 * - Admin Page (painel administrativo)
 * - User Management (gerenciamento de usu√°rios)
 * 
 * ========================================================================================
 */
            <div className="space-y-6">
              {/* Informa√ß√µes b√°sicas */}
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <User className="w-5 h-5 text-gray-600" />
                    <h3 className="font-semibold text-gray-900">Informa√ß√µes B√°sicas</h3>
                  </div>
                  {!isEditing && (
                    <button
                      onClick={() => setIsEditing(true)}
                      className="p-2 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded-full transition-colors"
                    >
                      <Edit3 className="w-4 h-4" />
                    </button>
                  )}
                </div>
                <div className="space-y-3">
                  <div>
                    <span className="text-sm font-medium text-gray-700">Nome:</span>
                    {isEditing ? (
                      <div className="mt-1 flex items-center space-x-2">
                        <input
                          type="text"
                          value={editedName}
                          onChange={(e) => setEditedName(e.target.value)}
                          className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
                          placeholder="Digite seu nome"
                        />
                        <button
                          onClick={handleSaveEdit}
                          className="p-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
                        >
                          <Save className="w-4 h-4" />
                        </button>
                        <button
                          onClick={handleCancelEdit}
                          className="p-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ) : (
                      <p className="text-gray-900 mt-1">{user.name}</p>
                    )}
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-700">Status:</span>
                    <p className="text-green-600 font-medium mt-1">
                      Online
                    </p>
                  </div>
                </div>
              </div>

              {/* Informa√ß√µes da conta */}
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center space-x-3 mb-3">
                  <Shield className="w-5 h-5 text-gray-600" />
                  <h3 className="font-semibold text-gray-900">Informa√ß√µes da Conta</h3>
                </div>
                <div className="space-y-3">
                  <div>
                    <span className="text-sm font-medium text-gray-700">Membro desde:</span>
                    <div className="flex items-center space-x-2 mt-1">
                      <Calendar className="w-4 h-4 text-gray-500" />
                      <p className="text-gray-900">
                        {user.createdAt 
                          ? new Date(user.createdAt).toLocaleDateString('pt-BR')
                          : 'Data n√£o dispon√≠vel'
                        }
                      </p>
                    </div>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-700">Tipo de conta:</span>
                    <p className="text-gray-900 mt-1">Usu√°rio padr√£o</p>
                  </div>
                </div>
              </div>

              {/* A√ß√µes */}
              <div className="pt-4 border-t border-gray-200">
                <div className="space-y-3">
                  <button className="w-full py-2 px-4 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors">
                    Alterar Foto do Perfil
                  </button>
                  <button className="w-full py-2 px-4 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors">
                    Alterar Senha
                  </button>
                  <button className="w-full py-2 px-4 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors">
                    Excluir Conta
                  </button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default ProfilePage;
